stages:
  - lint
  - test
  - build

# ✅ Глобальные переменные
variables:
  POSTGRES_USER: $POSTGRES_USER
  POSTGRES_PASSWORD: $POSTGRES_PASSWORD
  DB_PORT: $DB_PORT
  POSTGRES_DB: $POSTGRES_DB
  DB_HOST: $DB_HOST
  LOGLEVEL: $LOGLEVEL

# ✅ Общие настройки
default:
  image: python:3.12

  # ✅ Kеширование по зависимостям (pyproject.toml)
  cache:
    key:
      files:
        - pyproject.toml
        - poetry.lock
    paths:
      - .cache/pypoetry
      - .cache/pip

# ✅ Общая подготовка перед каждой job
before_script:
  - apt-get update && apt-get install -y curl
  - curl -sSL https://install.python-poetry.org | python3 -
  - export PATH="$HOME/.local/bin:$PATH"
  - poetry config virtualenvs.create false
  - poetry install --no-interaction --no-ansi --no-root

  # ✅ Генерация .env из CI-переменных
  - echo "POSTGRES_USER=${POSTGRES_USER}" > .env
  - echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> .env
  - echo "DB_PORT=${DB_PORT}" >> .env
  - echo "POSTGRES_DB=${POSTGRES_DB}" >> .env
  - echo "DB_HOST=${DB_HOST}" >> .env
  - echo "LOGLEVEL=${LOGLEVEL}" >> .env

# ✅ Job: Проверка кода (линтеры)
lint:
  stage: lint
  script:
    - poetry run flake8 .
    - poetry run isort . --check-only
    - poetry run ruff .
    - poetry run pylint internships_app/

# ✅ Job: Тесты
test:
  stage: test
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""

  script:
    - docker compose up --build -d
    - poetry run pytest
    - docker compose down -v
